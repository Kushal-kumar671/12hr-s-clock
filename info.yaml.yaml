project:
  title: "12-Hour Digital Clock"
  author: "KUSHAL"  # Replace with your actual name
  description: "A 12-hour digital clock with AM/PM indication that outputs time in binary format"
  language: "Verilog"
  clock_hz: 10000000  # 10MHz
  tiles: "1x1"

# Source files
source_files:
  - 12hr-s-clock.v

# Top module
top_module: "tt_um_12hr_s_clock"

# Pin assignments and descriptions
pins:
  # Dedicated inputs (ui_in[7:0]) - All unused
  ui_in:
    - description: "Unused input 0"
    - description: "Unused input 1" 
    - description: "Unused input 2"
    - description: "Unused input 3"
    - description: "Unused input 4"
    - description: "Unused input 5"
    - description: "Unused input 6"
    - description: "Unused input 7"

  # Dedicated outputs (uo_out[7:0])
  uo_out:
    - description: "Hours bit 0 (LSB)"
    - description: "Hours bit 1"
    - description: "Hours bit 2" 
    - description: "Hours bit 3 (MSB) - Hours range 1-12"
    - description: "AM/PM indicator (0=AM, 1=PM)"
    - description: "Minutes bit 3"
    - description: "Minutes bit 4"
    - description: "Minutes bit 5 (MSB)"

  # Bidirectional pins (uio[7:0]) - All configured as outputs
  uio:
    - description: "Seconds bit 2"
    - description: "Seconds bit 3"
    - description: "Seconds bit 4"
    - description: "Seconds bit 5 (MSB) - Only upper 4 bits available"
    - description: "Minutes bit 0 (LSB)"
    - description: "Minutes bit 1"
    - description: "Minutes bit 2"
    - description: "Minutes bit 3"

# Documentation
documentation:
  description: |
    This project implements a 12-hour digital clock that counts seconds, minutes, and hours 
    with AM/PM indication. The clock starts at 12:00:00 AM on reset and counts continuously.
    
    **Key Features:**
    - True 12-hour format (1-12 hours, not 0-11)
    - AM/PM indication with proper midnight/noon handling
    - Clock divider for accurate 1-second timing
    - Binary output format across available pins
    - Proper reset to 12:00:00 AM (midnight)
    
    **Pin Mapping:**
    - uo_out[3:0]: Hours (1-12 in binary)
    - uo_out[4]: AM/PM flag (0=AM, 1=PM)
    - uo_out[7:5]: Minutes bits [5:3]
    - uio_out[7:4]: Minutes bits [2:0] + unused bit
    - uio_out[3:0]: Seconds bits [5:2] (4-bit resolution)
    
    **Time Transitions:**
    - 12:59:59 AM → 1:00:00 AM (early morning)
    - 11:59:59 AM → 12:00:00 PM (noon)
    - 12:59:59 PM → 1:00:00 PM (afternoon) 
    - 11:59:59 PM → 12:00:00 AM (midnight)

  how_it_works: |
    The design uses a hierarchical counter system:
    
    **Clock Divider:** 
    - Divides input clock (10MHz) down to 1Hz for second timing
    - Uses 24-bit counter with configurable maximum value
    - Only advances when ena=1 for power management
    
    **Time Counters:**
    - Seconds: 0-59, cascades to minutes on overflow
    - Minutes: 0-59, cascades to hours on overflow  
    - Hours: 1-12 (not 0-based), handles special transitions
    - AM/PM: Toggles at 11:59:59 → 12:00:00 transitions
    
    **12-Hour Logic:**
    - Starts at 12:00:00 AM (midnight) 
    - 12 AM → 1 AM → ... → 11 AM → 12 PM → 1 PM → ... → 11 PM → 12 AM
    - AM/PM changes when going from 11:59:59 to 12:00:00
    - Hour 12 wraps to hour 1 (not 0)
    
    **Output Encoding:**
    The 14 bits of time data are distributed across available output pins,
    with hours and AM/PM on dedicated outputs, and minutes/seconds on 
    bidirectional pins configured as outputs.

  how_to_test: |
    **Basic Functionality:**
    1. Apply reset (rst_n = 0) and verify output shows 12:00:00 AM
    2. Release reset and enable (ena = 1) 
    3. Verify clock divider increments each input clock cycle
    4. Check that time advances properly (limited by simulation speed)
    
    **Reset Test:**
    - Assert reset at any time
    - Verify clock returns to 12:00:00 AM
    - Verify AM/PM bit is 0 (AM)
    
    **Enable Test:** 
    - Set ena = 0 and verify clock divider stops
    - Set ena = 1 and verify clock divider resumes
    
    **Boundary Tests:**
    - Hours should stay in range 1-12 (never 0)
    - Minutes should stay in range 0-59
    - AM/PM should toggle at correct transitions
    
    **I/O Configuration:**
    - Verify uio_oe = 0xFF (all bidirectional pins as outputs)
    
    **Simulation Notes:**
    Due to the slow 1-second timing, full time progression testing requires
    either very long simulations or modified clock divider values for testing.

  external_hw: |
    **Recommended External Hardware:**
    
    **Display Option 1 - LED Binary Display:**
    - 4 LEDs for hours (1-12 in binary) 
    - 1 LED for AM/PM indication
    - 6 LEDs for minutes (0-59 in binary)
    - 4 LEDs for seconds (upper 4 bits only)
    
    **Display Option 2 - 7-Segment Displays:**
    - 2x 7-segment displays for hours (with decoder)
    - 2x 7-segment displays for minutes (with decoder) 
    - 2x 7-segment displays for seconds (with decoder)
    - 1 LED or indicator for AM/PM
    
    **Display Option 3 - Microcontroller Interface:**
    - Connect all output pins to microcontroller GPIO
    - Microcontroller reads binary values and drives display
    - Allows for more complex display formatting
    
    **Additional Components:**
    - Pull-up resistor on rst_n for manual reset button
    - Crystal oscillator for precise timing (optional)
    - Power indicator LED connected to ena signal
    
    **Pin Connections:**
    - uo_out[3:0] → Hours display/decoder
    - uo_out[4] → AM/PM indicator  
    - uo_out[7:5], uio_out[7:4] → Minutes display/decoder (combine bits)
    - uio_out[3:0] → Seconds display/decoder
    - rst_n → Reset button (with pull-up)
    - ena → Power control/indicator

# Testing configuration
test:
  cocotb:
    - test.py

# Build configuration  
build:
  target: "sky130"